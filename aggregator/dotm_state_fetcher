#!/bin/bash

# This file is part of Devops Trouble Map (short DOTM).
#
# DOTM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# DOTM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with DOTM.  If not, see <http://www.gnu.org/licenses/>.

# This is a temporary hack to provide the "periodic state fetcher"
# functionality. As Bash is not the best choice for data transformations
# it should be reimplemented in Python using a real Redis binding

readonly PIDFILE=/tmp/$(basename $0).pid
readonly REDIS_CLI="redis-cli -n 0 -h localhost -p 6379"

NL="
"

strstr() { [ -z "${2##*$1*}" ] && [ -n "$2" -o -z "$1" ]; }

# Push a list of key values into a given Redis key
#
# $1		the key
# $2...$n	key value pairs
redis_push() {
	local key=$(shift)
	local params=("$@")
	local output=$($REDIS_CLI hmset $key "${params[@]}")
	if [ $? -ne 0 -o "$output" != "OK" ]; then
		echo "ERROR: Failed to run >>>$REDIS_CLI hmset $key ${params[@]}<<<!" >&2
		echo "$output"
	fi
}

# Load configured whitelisted networks
declare -a netmasks
load_nets() {
	# Note: configuration contains CIDR netmasks that we need
	# to convert to hex values for easy checking
	private_networks="127.0.0.0/8 10.0.0.0/8 172.16.0.0/12 192.168.0.0/16"
	extra_networks=$($REDIS_CLI lrange dotm::config::other_internal_networks 0 -1 2>/dev/null)
	for cidr in $private_networks $extra_networks
	do
		if [[ $cidr =~ ([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/([0-9]+) ]]; then
			netmasks+=($(printf 'network=0x%02x%02x%02x%02x;netmask=0x%08x\n' ${BASH_REMATCH[1]} ${BASH_REMATCH[2]} ${BASH_REMATCH[3]} ${BASH_REMATCH[4]} $((2**32-2**(32-${BASH_REMATCH[5]})))))
		else
			echo "ERROR: Invalid network address '$cidr'!" >&2
		fi
	done
}

# Loads all user provided config values from Redis
load_settings() {

	load_nets

	# Create port egrep expressions, filtering common ports
	ports=$($REDIS_CLI get dotm::config::service_port_whitelist 2>/dev/null | sed "s/,/|/g")
	if [ "$ports" == "(nil)" -o "$ports" == "" ]; then
		# FIXME: Avoid default duplication with backend
		ports='53|22|5666|4949|4848|25|631'
	fi
	readonly LISTEN_FILTER="^($ports)$"
	readonly ESTABLISHED_FILTER="${LISTEN_FILTER}"
}

# Match all whitelisted netmask against a given IP
#
# $1	IPv4 address
#
# Returns 1 if any netmask matches, 0 otherwise
match_nets() {
	local ip=$1

	if [[ $ip =~ ([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
		ip=$(printf '0x%02x%02x%02x%02x' ${BASH_REMATCH[1]} ${BASH_REMATCH[2]} ${BASH_REMATCH[3]} ${BASH_REMATCH[4]})
	else
		echo "ERROR: Invalid IP '$ip'!" >&2
		return 0
	fi

	for entry in ${!netmasks[*]}
	do
		eval "${netmasks[$entry]}"
		if [[ $(($ip & $netmask)) -eq $network ]]; then
			return 1
		fi
	done

	return 0
}

declare -A ip_to_name_cache

# Make an IP human readable, by either deciding it to be
# Internet (thereby reducing it) or mapping to a known node name.
# If nothing is known about an internal IP it will be returned as is.
#
# $1	IPv4 address
#
# Sets variable $resolved to a non-empty string (either node name or 'Internet' or the IP)
ip_to_name() {
	local ip=$1

	ip_key="i${ip//./_}"

	if [[ ${ip_to_name_cache[$ip_key]} ]]; then
		out="${ip_to_name_cache[$ip_key]}"
	else
		# Try internal resolver
		out=$($REDIS_CLI get "dotm::resolver::ip_to_node::$ip" 2>/dev/null)

		# Try local resolving
		if [ "$out" == "" ]; then
			out=$(getent hosts $ip | awk '{print $2}')
		fi

		if [ "$out" != "" ]; then
			ip_to_name_cache[$ip_key]="$out"
		fi
	fi

	if [ "$out" != "" ]; then
		resolved="$out"
		return
	fi

	if match_nets $ip; then
		resolved="Internet"
		return
	fi

	resolved=$ip
}

# Node state fetch failed. Add info to Redis
#
# $1	Error message
node_fetch_error() {
	local errmsg="'$1'"
	local now=$(date +%s)

	echo "ERROR: $errmsg! Ignoring it." >&1
	redis_push "dotm::nodes::${c}" last_fetch "$now" fetch_status "$errmsg"
}

PID=$(cat "$PIDFILE" 2>/dev/null)
if [ "$PID" != "" ]; then
	if kill -0 "$PID" >/dev/null 2>&1; then
		echo "WARNING: Terminating, another instance is still running ($PID)!"
		exit 0
	fi
fi
echo $$ >"$PIDFILE"

if ! $REDIS_CLI info >/dev/null; then
	echo "ERROR: Cannot run '$REDIS_CLI'! Is it installed?" >&2
	exit 1
fi

readonly CLIENTS=$($REDIS_CLI lrange dotm::nodes 0 -1)
if [ "$CLIENTS" == "" ]; then
	echo "ERROR: Could not determine list of client nodes!" >&2
	exit 1
fi

FETCH_METHOD=$($REDIS_CLI get dotm::config::fetch_method)
if [ "$FETCH_METHOD" == "" ]; then
	FETCH_METHOD="ssh"
fi

. $(dirname $0)/fetch_${FETCH_METHOD}
if [ $? != 0 ]; then
	echo "ERROR: Failed to source fetch method '$FETCH_METHOD'!"
	exit 1
fi

main()
{
	load_settings

	# Get index of previously known connections to match for remote
	# service endpoints we know and care about
	known_connections=$($REDIS_CLI keys dotm::connections::*)

	declare -A listen_ports
	declare -A used_services
	for c in $CLIENTS;
	do
		echo "Fetching from '$c'..."
		output=$(fetch $c)
		if [ $? -ne 0 ]; then
			node_fetch_error "Connection to $c failed"
			continue
		fi

		# Validate output
		# - check for node name
		# - check for connection list
		# - check for IP list
		if [[ ! "$output" =~ ^hostname= ]]; then
			node_fetch_error "Result from $c missing hostname"
			continue
		fi

		# There should be at least one established connection (that's us!)
		if [[ ! "$output" =~ ESTABLISHED ]]; then
			node_fetch_error "Result from $c missing connection listing"
			continue
		fi

		# There should be at least one interface listed
		if [[ ! "$output" =~ inet\  ]]; then
			node_fetch_error "Result from $c missing interface listing"
			continue
		fi

		# Parse output and store into Redis
		now=$(date +%s)

		echo "Services $c:"
		unset listen_ports
		unset used_services
		while read proto recvq sendq localaddr remoteaddr state program rest; do
			localport=${localaddr##*:}
			program=${program##*/}
			program=${program:-unknown}

			if [[ ! $localport =~ $LISTEN_FILTER ]]; then
				echo "  -> listening on port $localport	(${program})"
				listen_ports[$localport]=${program}
				used_services[$localport]=0
			fi
		done < <(echo "$output" | grep "^tcp.*LISTEN")

		echo "Connections $c:"
		added_in=
		added_out=
		while read proto recvq sendq localaddr remoteaddr state program rest; do
			localip=${localaddr%%:*}
			localport=${localaddr##*:}
			remoteip=${remoteaddr%%:*}
			remoteport=${remoteaddr##*:}
			program=${program##*/}
			program=${program:-unknown}

			if [ "$program" == "dotm_node" ]; then
				continue
			fi

			# Detect local connection service endpoint
			local_service=
			if [ "$remoteip" == "127.0.0.1" ]; then
				local_service="local_service '${listen_ports[$remoteport]}'"
				#echo "      connected to local service >>>$local_service<<<"
			fi

			ip_to_name $remoteip
			remoteip=$resolved

			# FIXME: local connections currently are described as incoming
			if [ "${listen_ports[${localport}]}" == "" ]; then
				# Reduce listings of random ports
				# FIXME: do not do this for well known remote server ports
				# FIXME: do not do this for services we know about
				if [ "$remoteport" -gt 1023 ]; then
					if ! echo "$known_connections" | grep "^dotm::connections::${remoteip}::${remoteport}::" >/dev/null; then
						remoteport="high"
					fi
				fi

				key="dotm::connections::${c}::${remoteport}::${remoteip}"
				if ! strstr "$key" "$added_out"; then
					conn_count=$(echo "$output" | grep "[[:space:]]$localip:[0-9][0-9]*[[:space:]]*$remoteaddr[[:space:]]" | wc -l)
					echo "  -> $conn_count outgoing connection to $remoteaddr (to $remoteip:$remoteport by $program)"
					redis_push "$key" \
						process "$program" \
						last_seen "$now" \
						local_port "$localport" \
						remote_port "$remoteport" \
						remote_host "$remoteip" \
						$local_service \
						connections "$conn_count" \
						direction "out"
					added_out="${added_out}${NL}$key"
				fi
			else
				key="dotm::connections::${c}::${localport}::${remoteip}"
				if ! strstr "$key" "$added_in"; then
					# FIXME: Consolidate incoming connections based on frequency
					# e.g. count per net and combine to network if too many appear

					# FIXME: connection count wrong
					conn_count=$(echo "$output" | grep "[[:space:]]$localaddr[[:space:]]*$remoteip:[0-9][0-9]*[[:space:]]" | wc -l)
					echo "  -> $conn_count incoming from $remoteaddr ($remoteip to $localport $program)"
					redis_push "$key" \
						process "$program" \
						last_seen "$now" \
						local_port "$localport" \
						remote_port "$remoteport" \
						remote_host "$remoteip" \
						connections "$conn_count" \
						direction "in"
					used_services[$localport]=1
					added_in="${added_in}${NL}$key"
				fi
			fi
		done < <(echo "$output" | grep ESTABL | egrep -v "$ESTABLISHED_FILTER")

		# Submit service list to indicate which ones are unused and which one are not
		for port in ${!used_services[*]};
		do
			program="${listen_ports[$port]}"
			program=${program:-unknown}
			if [[ ${used_services[$port]} -eq 0 ]]; then
				echo "  -> found unused service $port (${listen_ports[$port]})"
				redis_push "dotm::services::${c}::${port}" process "$program" last_seen "$now"
			else
				redis_push "dotm::services::${c}::${port}" process "$program" last_seen "$now" last_connection "$now"
			fi
		done

		# Crude "ip addr" parsing...
		ips=$(
		while read inet ip brd broadcast scope global interface rest; do
			echo ${ip%%/[0-9]*}
		done < <(echo "$output" | grep "inet " | grep -v "host lo") | xargs
		)
		echo "IPs:" ${ips// /,}
		for ip in $ips
		do
			$REDIS_CLI set dotm::resolver::ip_to_node::$ip $c >/dev/null
		done
		redis_push "dotm::nodes::${c}" last_fetch "$now" fetch_status "OK" ips "${ips// /,}"
	done
}

main
rm "$PIDFILE"
echo "Done."
